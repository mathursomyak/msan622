Y2 = 0.707*X1 + 0.707*X2"
# PART B:
#----------
"6A answers are different from question 5 answers because the correlation matrix is a normalized version
of the covariance matrix. The eigen values in 6a are less extreme."
#==============
# QUESTION 7
#==============
"Y3 = X3
Y2 = X2
Y1 = X1"
"The eigen vectors are as follows:"
eigvec <- matrix(c(1,0,0,0,1,0,0,0,1),nrow=3,ncol=3)
eigvec
#==============
# QUESTION 8
#==============
S = matrix(c(10005.2, 255.76, 255.76, 14.30), nrow=2, ncol=2)
x_bar = c(62309, 2927)
# PART A:
#----------
"The principal components are:"
eigen(S)$vectors
"The variance for each PC is:"
eigen(S)$values
# PART B:
#----------
"Portion of Variance explained by each PC:"
eigen(S)$values/sum(eigen(S)$values)
# PART C:
#----------
install.packages("ellipse")
library(ellipse)
ella <- ellipse(S,centre=x_bar,level = 0.5)
plot(ella, type='l',)
par(new=T)
plot(eigen(S)$vectors[,1], type='l', xaxt='n', ann=F, yaxt='n')
par(new=T)
plot(eigen(S)$vectors[,2], type='l', xaxt='n', ann=F, yaxt='n')
# PART D:
#----------
"The first PC looks like it's mostly taken from sales. And the 2nd PC is a contrast
of the sales and profit"
#==============
# QUESTION 9
#==============
data <- read.csv("C:/Users/skmathur/Documents/Analytics/MultiVariateStats/HW1/BartlettTest.csv",header=F)
# PART A:
#----------
C <- cor(data)
bartlett.test(data)
"Here, we fail to reject the null hypothesis that rho = constant. By looking at the correlation matrix
we see that this makes sense intuitively: many off diagonal rho values are close together."
# PART B:
#----------
data_o <- rbind(data,c(10800,12000,10000,10000))
bartlett.test(data_o)
"The p-value of the data with the added outlier is very low. Which means we'd now reject the null hypothesis
So this test is sensitive to outliers."
install.packages("ellipse")
myTheme <- theme(text = element_text(size = 14, color = #252525),
axis.text.x = element_text(color = #252525),
axis.text.y = element_text(color = #252525),
)
library(ggplot2)
library(shiny)
library(scales)
myTheme <- theme(text = element_text(size = 14, color = #252525),
axis.text.x = element_text(color = #252525),
axis.text.y = element_text(color = #252525),
)
library(RColorBrewer)
myTheme <- theme(text = element_text(size = 14, color = #252525),
axis.text.x = element_text(color = #252525),
axis.text.y = element_text(color = #252525),
)
myTheme <- theme(text = element_text(size = 14, color = #252525),
axis.text.x = element_text(color = #252525),
axis.text.y = element_text(color = #252525)
)
runApp()
setwd("~/GitHub/msan622/homework2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print levels(movies$genre)
levels(movies$genre)
movies <- getDataShapedUp()
getDataShapedUp <- function(){
data(movies)
getDataShapedUp <- function(){
movies1 <- subset(movies,budget>0) #filter out movies with a negative budget
movies1 <- subset(movies1,(mpaa)!='') #filter out movies without an mpaa rating
genre <- rep(NA, nrow(movies1))
count <- rowSums(movies1[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies1$Action == 1)] = "Action"
genre[which(count == 1 & movies1$Animation == 1)] = "Animation"
genre[which(count == 1 & movies1$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies1$Drama == 1)] = "Drama"
genre[which(count == 1 & movies1$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies1$Romance == 1)] = "Romance"
genre[which(count == 1 & movies1$Short == 1)] = "Short"
movies1$genre <- genre
movies1$mpaa <- factor(movies1$mpaa, levels = c("NC-17","R","PG-13","PG"))
return(movies1)
}
movies <- getDataShapedUp()
ww
ksldfe
print gg
head(movies)
movies <- getDataShapedUp()
getDataShapedUp <- function(){
movies1 <- subset(movies,budget>0) #filter out movies with a negative budget
movies1 <- subset(movies1,(mpaa)!='') #filter out movies without an mpaa rating
genre <- rep(NA, nrow(movies1))
count <- rowSums(movies1[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies1$Action == 1)] = "Action"
genre[which(count == 1 & movies1$Animation == 1)] = "Animation"
genre[which(count == 1 & movies1$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies1$Drama == 1)] = "Drama"
genre[which(count == 1 & movies1$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies1$Romance == 1)] = "Romance"
genre[which(count == 1 & movies1$Short == 1)] = "Short"
movies1$genre <- genre
movies1$mpaa <- factor(movies1$mpaa, levels = c("NC-17","R","PG-13","PG"))
return(movies1)
}
movies <- getDataShapedUp()
levels(movies$genre)
data(movies)
movies <- subset(movies,budget>0) #filter out movies with a negative budget
movies <- subset(movies,(mpaa)!='') #filter out movies without an mpaa rating
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre <- factor(genre)
movies$mpaa <- factor(movies$mpaa, levels = c("NC-17","R","PG-13","PG"))
View(movies)
levels(movies$genre)
levels(movies$mpaa)
movies$genre <- factor(genre, levels = "Action", "Animation","Comedy","Documentary","Drama","Romance","Short","Mixed","None")
movies$genre <- factor(genre, levels = c("Action","Animation","Comedy","Documentary","Drama","Romance","Short","Mixed","None"))
levels(movies$genre)
genres <- levels(movies$genre)
mpaas <- levels(movies$mpaa)
source('~/GitHub/msan622/homework2/server.R')
source('~/GitHub/msan622/homework2/server.R')
names(color) <- genres
color <- c(brewer.pal(length(levels(movies$genre)), input$palette), "#f0f0f0")
runApp()
brewer.pal(n,"Dark2")
brewer.pal(2,"Dark2")
brewer.pal(3,"Dark2")
levels(movies$genre)
movies$genre <- factor(genre, levels = c("Action","Animation","Comedy","Documentary","Drama","Romance","Short","Mixed","None"))
data(movies)
movies <- subset(movies,budget>0) #filter out movies with a negative budget
movies <- subset(movies,(mpaa)!='') #filter out movies without an mpaa rating
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre <- factor(genre, levels = c("Action","Animation","Comedy","Documentary","Drama","Romance","Short","Mixed","None"))
movies$mpaa <- factor(movies$mpaa, levels = c("NC-17","R","PG-13","PG"))
brewer.pal(length(levels(movies$genre)), "Dark2")
genres
class(genres)
typeof(genres)
names(color) <- genres
color <- brewer.pal(length(levels(movies$genre)), "Dark2")
names(color) <- genres
names(color) <- c(genres,"grey")
length(levels(movies$genre))
length(color)
color <- c(brewer.pal(length(levels(movies$genre)), "Dark2"), "#f0f0f0")
names(color) <- c(genres)
source('~/GitHub/msan622/homework2/server.R')
runApp()
source('~/GitHub/msan622/homework2/server.R')
source('~/GitHub/msan622/homework2/server.R')
runApp()
current
source('~/GitHub/msan622/homework2/server.R')
runApp()
data(movies)
View(movies)
movies <- subset(movies,budget>0) #filter out movies with a negative budget
movies <- subset(movies,(mpaa)!='') #filter out movies without an mpaa rating
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre <- factor(genre, levels = c("Action","Animation","Comedy","Documentary","Drama","Romance","Short","Mixed","None"))
movies$mpaa <- factor(movies$mpaa, levels = c("NC-17","R","PG-13","PG"))
genres <- levels(movies$genre)
mpaas <- levels(movies$mpaa)
View(movies)
source('~/GitHub/msan622/homework2/server.R')
runApp()
input$MPAA_Rating
input$Genres
runApp()
input$Genres
highlight
dim(highlight)
dim(inactive)
runApp()
levels(input$Genres)
length(input$Genres)
source('~/GitHub/msan622/homework2/server.R')
runApp()
dim(input$Genres)
input$Genres
input$MPAA_Rating
dim(movies)
highlight
dim(highlight)
dim(inactive)
source('~/GitHub/msan622/homework2/server.R')
source('~/GitHub/msan622/homework2/server.R')
runApp()
dim(inactive)
dim(highlight)
dim(active)
dim(inactive)
nrow(inactive)
source('~/GitHub/msan622/homework2/server.R')
source('~/GitHub/msan622/homework2/server.R')
runApp()
View(movies)
data(movies)
movies <- subset(movies,budget>0) #filter out movies with a negative budget
movies <- subset(movies,(mpaa)!='') #filter out movies without an mpaa rating
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies$genre <- factor(genre, levels = c("Action","Animation","Comedy","Documentary","Drama","Romance","Short","Mixed","None"))
movies$mpaa <- factor(movies$mpaa, levels = c("NC-17","R","PG-13","PG"))
genres <- levels(movies$genre)
mpaas <- levels(movies$mpaa)
data(movies)
movies <- subset(movies,budget>0) #filter out movies with a negative budget
movies <- subset(movies,(mpaa)!='') #filter out movies without an mpaa rating
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
#movies$genre <- factor(genre, levels = c("Action","Animation","Comedy","Documentary","Drama","Romance","Short","Mixed","None"))
movies$mpaa <- factor(movies$mpaa, levels = c("NC-17","R","PG-13","PG"))
genres <- levels(movies$genre)
mpaas <- levels(movies$mpaa)
View(movies)
data(movies)
movies <- subset(movies,budget>0) #filter out movies with a negative budget
movies <- subset(movies,(mpaa)!='') #filter out movies without an mpaa rating
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
#movies$genre <- factor(genre, levels = c("Action","Animation","Comedy","Documentary","Drama","Romance","Short","Mixed","None"))
movies$mpaa <- factor(movies$mpaa, levels = c("NC-17","R","PG-13","PG"))
movies$genre <- genre
View(movies)
movies$genre <- factor(genre, levels = c("Action","Animation","Comedy","Documentary","Drama","Romance","Short","Mixed","None"))
source('~/GitHub/msan622/homework2/server.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$Genres
dim(highlight)
dim(inactive)
source('~/GitHub/msan622/homework2/server.R')
runApp()
runApp()
runApp()
runApp()
runApp()
0
p
print p
prnt(p)
print(p)
source('~/GitHub/msan622/homework2/server.R')
source('~/GitHub/msan622/homework2/server.R')
length(levels(movies$genre))
genres
source('~/GitHub/msan622/homework2/server.R')
source('~/GitHub/msan622/homework2/server.R')
runApp()
setwd("~/Analytics/MultiVariateStats/HW1")
data <- read.csv("C:/Users/skmathur/Documents/Analytics/MultiVariateStats/HW1/TrackbyCountry/TrackbyCountryData.csv", header=FALSE, sep=",")
data <- data[2:10] #remove NA column
names(data) <- c("M100", "M200", "M400", "M800", "M1500", "KM5", "KM10", "Marathon", "Country")
View(data)
data <- read.csv("C:/Users/skmathur/Documents/Analytics/MultiVariateStats/HW1/TrackbyCountryData.csv", header=T, sep=",")
View(data)
data <- read.csv("C:/Users/skmathur/Documents/Analytics/MultiVariateStats/HW1/TrackbyCountryData.csv", header=T, sep=",")
View(data)
View(data[4:8,])
View(data[,4:8])
(data[,4:8]) <- 60*(data[,4:8])
data[,4:8] <- (60*(data[,4:8]))
data[,4:8] <- (60*(data[,4:8]))
View(data)
data <- read.csv("C:/Users/skmathur/Documents/Analytics/MultiVariateStats/HW1/TrackbyCountryData.csv", header=T, sep=",")
View(data)
data[,4:8] <- (60*(data[,4:8]))
View(data)
data <- read.csv("C:/Users/skmathur/Documents/Analytics/MultiVariateStats/HW1/TrackbyCountryData.csv", header=T, sep=",")
View(data)
apply(data[,4:8], 2, function(x) 60*x)
View(data)
1.81*60
data <- read.csv("C:/Users/skmathur/Documents/Analytics/MultiVariateStats/HW1/TrackbyCountryData.csv", header=T, sep=",")
data[,4:8] <- apply(data[,4:8], 2, function(x) 60*x)
View(data)
princomp(data)
names(data)
typeof(1:12)
typeof(paste(1:12))
paste(names(data))
n <- c(names(data))
paste(n,sep="+")
paste("today is",date())
princomp(formula,data)
princomp(formula,data=data)
princomp(~M100+M200+M400+M800+M1500+KM5+KM10+Marathon,data=data)
eigen(data)
eigen(cor(data))
cor(data)
eigen(cor(data[,1:8]))
eigen(cor(data[,1:8]))
princomp(~M100+M200+M400+M800+M1500+KM5+KM10+Marathon,data=data)
eigen(cov(data[,1:8]))
p <- princomp(~M100+M200+M400+M800+M1500+KM5+KM10+Marathon,data=data)
p$sdev**2
eigen(cov(data[,1:8]))
eigen(cov(data[,1:8]))$values
p$sdev**2
s <- scale(data[,1:8])
eigen(cov(s))$values
eigen(cor(s))$values
eigen(cov(data[,1:8]))$vectors
summary(p)
p$loadings
eigen(cov(data[,1:8]))$vectors
cov(data[,1:8])
diag(cov(data[,1:8]))
eigen(cov(data[,1:8]))$vectors
data = [[1,2,3]
[4,2,1]
[2,4,4]]
data = c([1,2,3]
[4,2,1]
[2,4,4])
data = data.frame(c(1,2,3),c(4,2,1),c(2,4,4))
e <- eigen(cov(data))
e
eigen(cov(data))$vectors
diag(cov(data))
.457*sqrt(4.5)/1
corr_Yi_and_Xk <- function(data){
eigenvectors  <- eigen(cov(data))$vectors
eigenvalues   <- sqrt(eigen(cov(data))$values)
orig_feat_var <- diag(cov(data))
ans <- apply(eigenvectors, 1, function(x) x*sqrt(eigenvalues))
return(ans)
}
corr_Yi_and_Xk(data)
corr_Yi_and_Xk <- function(data){
eigenvectors  <- eigen(cov(data))$vectors
eigenvalues   <- sqrt(eigen(cov(data))$values)
orig_feat_var <- diag(cov(data))
ans <- apply(eigenvectors, 1, function(x) x*sqrt(abs(eigenvalues)))
return(ans)
}
corr_Yi_and_Xk(data)
corr_Yi_and_Xk <- function(data){
eigenvectors  <- eigen(cov(data))$vectors
eigenvalues   <- sqrt(abs(eigen(cov(data))$values))
orig_feat_var <- diag(cov(data))
ans <- apply(eigenvectors, 1, function(x) x*sqrt(abs(eigenvalues)))
return(ans)
}
corr_Yi_and_Xk(data)
.457*sqrt(4.5)/1
diag(cov(data))
corr_Yi_and_Xk(data)
eigen(cov(data))$vectors
eigen(cov(data))$values
corr_Yi_and_Xk <- function(data){
eigenvectors  <- eigen(cov(data))$vectors
eigenvalues   <- sqrt(abs(eigen(cov(data))$values))
orig_feat_var <- diag(cov(data))
ans <- apply(eigenvectors, 2, function(x) x*sqrt(abs(eigenvalues)))
return(ans)
}
corr_Yi_and_Xk(data)
corr_Yi_and_Xk <- function(data){
eigenvectors  <- eigen(cov(data))$vectors
eigenvalues   <- sqrt(abs(eigen(cov(data))$values))
orig_feat_var <- diag(cov(data))
ans <- apply(eigenvectors, 2, function(x) x*sqrt(abs(eigenvalues))/orig_feat_var)
return(ans)
}
corr_Yi_and_Xk(data)
corr_Yi_and_Xk <- function(data){
eigenvectors  <- eigen(cov(data))$vectors
eigenvalues   <- sqrt(abs(eigen(cov(data))$values))
orig_feat_var <- diag(cov(data))
ans <- apply(eigenvectors, 2, function(x) x*sqrt(abs(eigenvalues))/orig_feat_var)
return(ans)
}
corr_Yi_and_Xk(data)
corr_Yi_and_Xk <- function(data){
eigenvectors  <- eigen(cov(data))$vectors
eigenvalues   <- sqrt(abs(eigen(cov(data))$values))
orig_feat_var <- diag(cov(data))
ans <- eigenvectors %*% eigenvalues
#ans <- apply(eigenvectors, 2, function(x) x*sqrt(abs(eigenvalues))/orig_feat_var)
return(ans)
}
corr_Yi_and_Xk(data)
corr_Yi_and_Xk <- function(data){
eigenvectors  <- eigen(cov(data))$vectors
eigenvalues   <- sqrt(abs(eigen(cov(data))$values))
orig_feat_var <- diag(cov(data))
ans <- eigenvectors * eigenvalues
#ans <- apply(eigenvectors, 2, function(x) x*sqrt(abs(eigenvalues))/orig_feat_var)
return(ans)
}
corr_Yi_and_Xk(data)
.457 *sqrt(4.5)
-.588*sqrt(.166)
eigen(cov(data))$vectors
eigen(cov(data))$vectors[1]
eigen(cov(data))$vectors[,1]
eigen(cov(data))$vectors[1,]
eigen(cov(data))$vectors[,1]
diag(cov(data))
diag(cov(data))[3]
corr_Yi_and_Xk <- function(data,i,k){
eik  <- eigen(cov(data))$vectors[k,i]
eigenvalue_i   <- sqrt(abs(eigen(cov(data))$values[i]))
orig_feat_var <- diag(cov(data))[k]
ans <- eik*eigenvalue_i/orig_feat_var
#ans <- apply(eigenvectors, 2, function(x) x*sqrt(abs(eigenvalues))/orig_feat_var)
return(ans)
}
corr_Yi_and_Xk(data,2,2)
View(corr_Yi_and_Xk(data,2,2))
(corr_Yi_and_Xk(data,1,1))
corr_Yi_and_Xk(data,2,2)
.196*sqrt(.166)/sqrt(2.33)
eigen(cov(data))$values
