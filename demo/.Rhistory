summary(myPCA)
screeplot(myPCA)
eigen(cor(as.matrix(data)))
myPCA$loadings
"Both the scree plot and eigen values suggest using only the first principal component. The first PC is
the only one with eigenvalue greater than 1. 94% of the variance is explained with only the first PC. It
seems to represent an average of the original variables."
#==============
# QUESTION 5
#==============
Sigma <- matrix(c(5,2,2,2),nrow=2,ncol=2)
eigen(Sigma)$values
"The proportion of total variance explained by the 1st PC is 6/7, and 2nd PC is 1/7"
#==============
# QUESTION 6
#==============
Corr <- cov2cor(Sigma)
# PART A:
#----------
eigen(Corr)$values/sum(eigen(Corr)$values)
"Y1 = 0.707*X1 - 0.707*X2
Y2 = 0.707*X1 + 0.707*X2"
# PART B:
#----------
"6A answers are different from question 5 answers because the correlation matrix is a normalized version
of the covariance matrix. The eigen values in 6a are less extreme."
#==============
# QUESTION 7
#==============
"Y3 = X3
Y2 = X2
Y1 = X1"
"The eigen vectors are as follows:"
eigvec <- matrix(c(1,0,0,0,1,0,0,0,1),nrow=3,ncol=3)
eigvec
#==============
# QUESTION 8
#==============
S = matrix(c(10005.2, 255.76, 255.76, 14.30), nrow=2, ncol=2)
x_bar = c(62309, 2927)
# PART A:
#----------
"The principal components are:"
eigen(S)$vectors
"The variance for each PC is:"
eigen(S)$values
# PART B:
#----------
"Portion of Variance explained by each PC:"
eigen(S)$values/sum(eigen(S)$values)
# PART C:
#----------
install.packages("ellipse")
library(ellipse)
ella <- ellipse(S,centre=x_bar,level = 0.5)
plot(ella, type='l',)
par(new=T)
plot(eigen(S)$vectors[,1], type='l', xaxt='n', ann=F, yaxt='n')
par(new=T)
plot(eigen(S)$vectors[,2], type='l', xaxt='n', ann=F, yaxt='n')
# PART D:
#----------
"The first PC looks like it's mostly taken from sales. And the 2nd PC is a contrast
of the sales and profit"
#==============
# QUESTION 9
#==============
data <- read.csv("C:/Users/skmathur/Documents/Analytics/MultiVariateStats/HW1/BartlettTest.csv",header=F)
# PART A:
#----------
C <- cor(data)
bartlett.test(data)
"Here, we fail to reject the null hypothesis that rho = constant. By looking at the correlation matrix
we see that this makes sense intuitively: many off diagonal rho values are close together."
# PART B:
#----------
data_o <- rbind(data,c(10800,12000,10000,10000))
bartlett.test(data_o)
"The p-value of the data with the added outlier is very low. Which means we'd now reject the null hypothesis
So this test is sensitive to outliers."
install.packages("ellipse")
runApp()
library(ggplot2)
library(shiny)
# Objects defined outside of shinyServer() are visible to
# all sessions. Objects defined instead of shinyServer()
# are created per session. Place large shared data outside
# and modify (filter/sort) local copies inside shinyServer().
# See plot.r for more comments.
# Note: Formatting is such that code can easily be shown
# on the projector.
# Loads global data to be shared by all sessions.
loadData <- function() {
data("movies", package = "ggplot2")
start <- which(colnames(movies) == "Action")
end <- which(colnames(movies) == "Short")
genres <- colnames(movies)[start:end]
counts <- rep(0, length(genres))
for(i in 1:length(genres)) {
counts[i] <- sum(movies[, genres[i]])
}
df <- data.frame(factor(genres), counts)
colnames(df) <- c("Genres", "Counts")
return(df)
}
# Label formatter for numbers in thousands.
thousand_formatter <- function(x) {
return(sprintf("%dk", round(x / 1000)))
}
# Create plotting function.
getPlot <- function(localFrame, sortOrder, colorScheme = "None") {
# Figure out sort order.
localFrame$Genres <- factor(
localFrame$Genres,
levels = localFrame$Genres[sortOrder])
# Create base plot.
localPlot <- ggplot(localFrame, aes(x = Genres, y = Counts, fill = Genres)) +
geom_bar(stat = "identity") +
scale_y_continuous(expand = c(0, 500), label = thousand_formatter) +
theme(legend.position = "none") +
theme(panel.grid.major.x = element_blank()) +
theme(panel.grid.minor.y = element_blank()) +
theme(axis.ticks.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(axis.title.x = element_blank()) +
ggtitle("Movies by Genre")
if (colorScheme == "Qualitative 1") {
localPlot <- localPlot +
scale_fill_brewer(type = "qual", palette = 1)
}
else if (colorScheme == "Qualitative 2") {
localPlot <- localPlot +
scale_fill_brewer(type = "qual", palette = 2)
}
else if (colorScheme == "Color-Blind Friendly") {
localPlot <- localPlot +
scale_fill_manual(values = palette1)
}
else {
localPlot <- localPlot +
scale_fill_grey(start = 0.4, end = 0.4)
}
return(localPlot)
}
##### GLOBAL OBJECTS #####
# Shared data
globalData <- loadData()
# Color-blind friendly palette from http://jfly.iam.u-tokyo.ac.jp/color/
palette1 <- c("#999999", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
##### SHINY SERVER #####
# Create shiny server. Input comes from the UI input
# controls, and the resulting output will be displayed on
# the page.
shinyServer(function(input, output) {
cat("Press \"ESC\" to exit...\n")
# Copy the data frame (don't want to change the data
# frame for other viewers)
localFrame <- globalData
# Output row order based on sorting criteria
# Should update every time the sort column or descending
# checkbox is changed. (Explain reactive functions.)
sortOrder <- reactive(
{
if (input$sortColumn == "Genre") {
return(
order(
localFrame$Genres,
decreasing = input$sortDecreasing
)
)
}
else {
return(
order(
localFrame$Counts,
decreasing = input$sortDecreasing
)
)
}
}
)
# Output sorted table.
# Should update every time sort order updates.
output$table <- renderTable(
{
return(localFrame[sortOrder(), ])
},
include.rownames = FALSE
)
# Output sorted bar plot.
# Should update every time sort or color criteria changes.
output$barPlot <- renderPlot(
{
# Use our function to generate the plot.
barPlot <- getPlot(
localFrame,
sortOrder(),
input$colorScheme
)
# Output the plot
print(barPlot)
}
)
})
# Two ways to run this application. Locally, use:
runApp()
# To run this remotely, use:
# runGitHub("lectures", "msan622", subdir = "ShinyDemo/demo1")
library(shiny)
# Create a simple shiny page.
shinyUI(
# We will create a page with a sidebar for input.
pageWithSidebar(
# Add title panel.
headerPanel("Movie Genres"),
# Setup sidebar widgets.
sidebarPanel(
# Add a drop-down box for sort columns.
selectInput(
# This will be the variable we access later.
"sortColumn",
# This will be the control title.
"Sort By:",
# This will be the control choices.
choices = c("Genre", "Count")
),
# Add true/false checkbox for sorting.
checkboxInput(
"sortDecreasing",
"Decreasing",
FALSE
),
# Add a little bit of space between widgets.
br(),
# Add radio buttons for selecting the color scheme.
# Can only select one radio button at a time.
radioButtons(
"colorScheme",
"Color Scheme:",
c("None", "Qualitative 1", "Qualitative 2", "Color-Blind Friendly")
),
# Add a download link
HTML("<p align=\"center\">[ <a href=\"https://github.com/msan622/lectures/tree/master/ShinyDemo/demo1\">download source</a> ]</p>")
),
# Setup main panel.
mainPanel(
# Create a tab panel.
tabsetPanel(
# Add a tab for displaying the histogram.
tabPanel("Histogram", plotOutput("barPlot")),
# Add a tab for displaying the table (will be sorted).
tabPanel("Table", tableOutput("table"))
)
)
)
)
runApp()
setwd("~/GitHub/msan622/demo")
runApp()
runApp("demo")
runApp("demo")
shinyUI(fluitPage())
shinyUI(fluidPage())
runApp()
runApp()
runApp()
runApp()
runApp()
View(movies)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
data(movies)
# MOVIES DATA TRANSFORM #
#========================
getDataShapedUp <- function(){
data(movies)
movies1 <- subset(movies,budget>0) #filter out movies with a negative budget
movies1 <- subset(movies1,(mpaa)!='') #filter out movies without an mpaa rating
genre <- rep(NA, nrow(movies1))
count <- rowSums(movies1[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies1$Action == 1)] = "Action"
genre[which(count == 1 & movies1$Animation == 1)] = "Animation"
genre[which(count == 1 & movies1$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies1$Drama == 1)] = "Drama"
genre[which(count == 1 & movies1$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies1$Romance == 1)] = "Romance"
genre[which(count == 1 & movies1$Short == 1)] = "Short"
movies1$genre <- genre
return(movies1)
}
# VISUALIZATION #
#================
ggplot(data=movies1, aes(x=budget,
y=rating,
color=as.factor(mpaa)
)) +
geom_point(alpha = 0.5)
library(ggplot2)
data(movies)
# MOVIES DATA TRANSFORM #
#========================
getDataShapedUp <- function(){
data(movies)
movies1 <- subset(movies,budget>0) #filter out movies with a negative budget
movies1 <- subset(movies1,(mpaa)!='') #filter out movies without an mpaa rating
genre <- rep(NA, nrow(movies1))
count <- rowSums(movies1[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies1$Action == 1)] = "Action"
genre[which(count == 1 & movies1$Animation == 1)] = "Animation"
genre[which(count == 1 & movies1$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies1$Drama == 1)] = "Drama"
genre[which(count == 1 & movies1$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies1$Romance == 1)] = "Romance"
genre[which(count == 1 & movies1$Short == 1)] = "Short"
movies1$genre <- genre
return(movies1)
}
# VISUALIZATION #
#================
ggplot(data=movies1, aes(x=budget,
y=rating,
color=as.factor(mpaa)
)) +
geom_point(alpha = 0.5)
data(movies)
library(ggplot2)
data(movies)
# MOVIES DATA TRANSFORM #
#========================
getDataShapedUp <- function(){
data(movies)
movies1 <- subset(movies,budget>0) #filter out movies with a negative budget
movies1 <- subset(movies1,(mpaa)!='') #filter out movies without an mpaa rating
genre <- rep(NA, nrow(movies1))
count <- rowSums(movies1[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies1$Action == 1)] = "Action"
genre[which(count == 1 & movies1$Animation == 1)] = "Animation"
genre[which(count == 1 & movies1$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies1$Drama == 1)] = "Drama"
genre[which(count == 1 & movies1$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies1$Romance == 1)] = "Romance"
genre[which(count == 1 & movies1$Short == 1)] = "Short"
movies1$genre <- genre
return(movies1)
}
# VISUALIZATION #
#================
movies1 <- getDataShapedUp()
ggplot(data=movies1, aes(x=budget,
y=rating,
color=as.factor(mpaa)
)) +
geom_point(alpha = 0.5)
ggplot(data=movies1, aes(x=budget,
y=rating,
color=as.factor(mpaa)
)) +
geom_point(alpha = 0.5) +
ggtitle("title")+
scale_color_brewer(palette = "Dark2")
ggplot(data=movies1, aes(x=budget,
y=rating,
color=as.factor(mpaa)
)) +
geom_point(alpha = 0.5) +
ggtitle("title")+
theme(panel.grid.major.x = element_blank()) +
theme(panel.grid.minor.y = element_blank()) +
theme(axis.ticks.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(axis.title.x = element_blank())
scale_color_brewer(palette = "Dark2")
ggplot(data=movies1, aes(x=budget,
y=rating,
color=as.factor(mpaa)
)) +
geom_point(alpha = 0.5) +
ggtitle("title")+
theme(panel.grid.major.x = element_blank()) +
theme(panel.grid.minor.y = element_blank()) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_text(size = 12),
panel.background = element_blank())+
labs(color = "MPAA Rating")+
scale_color_brewer(palette = "Dark2")
levels(movies1$MPAA)
movies1$MPAA <- factor(movies1$MPAA, levels = c("NC-17","R","PG-13","PG"))
factor(movies1$mpaa, levels = c("NC-17","R","PG-13","PG"))
movies1$mpaa <- factor(movies1$mpaa, levels = c("NC-17","R","PG-13","PG"))
ggplot(data=movies1, aes(x=budget,
y=rating,
color=as.factor(mpaa)
)) +
geom_point(alpha = 0.5) +
#ggtitle("title")+
theme(panel.grid.major.x = element_blank()) +
theme(panel.grid.minor.y = element_blank()) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_text(size = 12),
panel.background = element_blank())+
labs(color = "MPAA Rating")+
scale_color_brewer(palette = "Dark2")
getDataShapedUp <- function(){
data(movies)
movies1 <- subset(movies,budget>0) #filter out movies with a negative budget
movies1 <- subset(movies1,(mpaa)!='') #filter out movies without an mpaa rating
genre <- rep(NA, nrow(movies1))
count <- rowSums(movies1[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies1$Action == 1)] = "Action"
genre[which(count == 1 & movies1$Animation == 1)] = "Animation"
genre[which(count == 1 & movies1$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies1$Drama == 1)] = "Drama"
genre[which(count == 1 & movies1$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies1$Romance == 1)] = "Romance"
genre[which(count == 1 & movies1$Short == 1)] = "Short"
movies1$genre <- genre
movies1$mpaa <- factor(movies1$mpaa, levels = c("NC-17","R","PG-13","PG"))
return(movies1)
}
movies1 <- getDataShapedUp()
ggplot(data=movies1, aes(x=budget,
y=rating,
color=as.factor(mpaa)
)) +
geom_point(alpha = 0.5) +
#ggtitle("title")+
theme(panel.grid.major.x = element_blank()) +
theme(panel.grid.minor.y = element_blank()) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_text(size = 12),
panel.background = element_blank()
legend.position = "bottom")+
labs(color = "MPAA Rating")+
scale_color_brewer(palette = "Dark2")
movies1 <- getDataShapedUp()
ggplot(data=movies1, aes(x=budget,
y=rating,
color=as.factor(mpaa)
)) +
geom_point(alpha = 0.5) +
#ggtitle("title")+
theme(panel.grid.major.x = element_blank()) +
theme(panel.grid.minor.y = element_blank()) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_text(size = 12),
panel.background = element_blank()
legend.position = "bottom")
ggplot(data=movies1, aes(x=budget,
y=rating,
color=as.factor(mpaa)
)) +
geom_point(alpha = 0.5) +
#ggtitle("title")+
theme(panel.grid.major.x = element_blank()) +
theme(panel.grid.minor.y = element_blank()) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_text(size = 12),
panel.background = element_blank(),
legend.position = "bottom")+
labs(color = "MPAA Rating")+
scale_color_brewer(palette = "Dark2")
ggplot(data=movies1, aes(x=budget,
y=rating,
color=as.factor(mpaa)
)) +
geom_point(alpha = 0.5, size = 8) +
#ggtitle("title")+
theme(panel.grid.major.x = element_blank()) +
theme(panel.grid.minor.y = element_blank()) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_text(size = 12),
panel.background = element_blank(),
legend.position = "bottom")+
labs(color = "MPAA Rating")+
scale_color_brewer(palette = "Dark2")
runApp()
runApp()
runApp()
runApp()
runApp()
